{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u2728Luminosity IoT Luminosity (also known as Twometer IoT) is a DIY open source IoT and smart home system.","title":"\u2728Luminosity IoT"},{"location":"#luminosity-iot","text":"Luminosity (also known as Twometer IoT) is a DIY open source IoT and smart home system.","title":"\u2728Luminosity IoT"},{"location":"devices/","text":"Devices Devices are uniquiely identified by their Device ID. This can for example be the ESP8266 Chip ID. Furthermore, the full device information is stored in a so-called device descriptor : This device descriptor looks like the following: { deviceId: \"\", type: \"\", modelName: \"\", manufacturer: \"\", description: \"\", properties: [{key: \"\", type: \"\", friendlyName: \"\", valueRange: \"\"}] } Note that valueRange is only accepted when the property is of type MODE Device Types Uses the same device types that Amazon Alexa uses. Property types EVENT : A property that does not actually have a value. It is used to signal an event (e.g. a tactile switch was pressed) BOOLEAN : A property that can be either true or false NUMBER : A decimal number COLOR : A color with the properties hue , saturation , brightness MODE : A property that describes one of many modes. Default Properties Devices have various defined default properties, that Alexa controllers are mapped to: Property Property type Alexa controller Device type Device.PowerState BOOLEAN PowerController any Device.PowerLevel NUMBER PowerLevelController any Light.Brightness NUMBER BrightnessController LIGHT Light.Color COLOR ColorController LIGHT Light.Temp NUMBER ColorTemperatureController LIGHT","title":"Devices"},{"location":"devices/#devices","text":"Devices are uniquiely identified by their Device ID. This can for example be the ESP8266 Chip ID. Furthermore, the full device information is stored in a so-called device descriptor : This device descriptor looks like the following: { deviceId: \"\", type: \"\", modelName: \"\", manufacturer: \"\", description: \"\", properties: [{key: \"\", type: \"\", friendlyName: \"\", valueRange: \"\"}] } Note that valueRange is only accepted when the property is of type MODE","title":"Devices"},{"location":"devices/#device-types","text":"Uses the same device types that Amazon Alexa uses.","title":"Device Types"},{"location":"devices/#property-types","text":"EVENT : A property that does not actually have a value. It is used to signal an event (e.g. a tactile switch was pressed) BOOLEAN : A property that can be either true or false NUMBER : A decimal number COLOR : A color with the properties hue , saturation , brightness MODE : A property that describes one of many modes.","title":"Property types"},{"location":"devices/#default-properties","text":"Devices have various defined default properties, that Alexa controllers are mapped to: Property Property type Alexa controller Device type Device.PowerState BOOLEAN PowerController any Device.PowerLevel NUMBER PowerLevelController any Light.Brightness NUMBER BrightnessController LIGHT Light.Color COLOR ColorController LIGHT Light.Temp NUMBER ColorTemperatureController LIGHT","title":"Default Properties"},{"location":"pairing/","text":"Pairing To add a new device to the system, the following steps happen: The admin enables pairing mode on the console The bridge opens the unencrypted pairing WiFi The device requests the bridge's pair endpoint with its full device descriptor (id, name, properties, etc.). The bridge returns the WiFi credentials as well as an authorization token to the new device, and closes the unencrypted WiFi. The bridge now exists pairing mode. The new device connects to the normal WiFi and is now paired.","title":"Pairing"},{"location":"pairing/#pairing","text":"To add a new device to the system, the following steps happen: The admin enables pairing mode on the console The bridge opens the unencrypted pairing WiFi The device requests the bridge's pair endpoint with its full device descriptor (id, name, properties, etc.). The bridge returns the WiFi credentials as well as an authorization token to the new device, and closes the unencrypted WiFi. The bridge now exists pairing mode. The new device connects to the normal WiFi and is now paired.","title":"Pairing"},{"location":"rest_api/","text":"REST API This page describes the modern REST API to interact with the bridge. Endpoints that do not have a response use HTTP status codes to inform the caller about the status. Status GET / { \"name\": \"lumi-bridge\", \"version\": \"3.0.0\", \"devices\": 42, \"status\": \"online\" } Admin POST /admin { \"action\": \"enable_pairing|...\" } Pair POST /pair { \"device\": device_descriptor } { \"wifiKey\": \"\", \"authToken\": \"\" } List Devices GET /device List Scenes GET /scene","title":"REST API"},{"location":"rest_api/#rest-api","text":"This page describes the modern REST API to interact with the bridge. Endpoints that do not have a response use HTTP status codes to inform the caller about the status.","title":"REST API"},{"location":"rest_api/#status","text":"GET / { \"name\": \"lumi-bridge\", \"version\": \"3.0.0\", \"devices\": 42, \"status\": \"online\" }","title":"Status"},{"location":"rest_api/#admin","text":"POST /admin { \"action\": \"enable_pairing|...\" }","title":"Admin"},{"location":"rest_api/#pair","text":"POST /pair { \"device\": device_descriptor } { \"wifiKey\": \"\", \"authToken\": \"\" }","title":"Pair"},{"location":"rest_api/#list-devices","text":"GET /device","title":"List Devices"},{"location":"rest_api/#list-scenes","text":"GET /scene","title":"List Scenes"},{"location":"udp_protocol/","text":"UDP protocol Communication between the bridge and the device happens with a lightweight UDP protocol. The protocol is comprised of simple text messages of different types. Message format The message format is very basic: <PacketType>:<Arg1>:<Arg2>:... Message types DISCOV : Broadcast, and the bridge will reply with BHELLO and its IP address BHELLO : Reply to DISCOV , contains the IP address in arg1 DHELLO : Device hello to notify the bridge that a device is online UPDATE : Sent from the bridge to the device to update a property REPORT : Sent from the device to the bridge to report a value has changed (e.g. a sensor that updated) PING : Keepalive from the bridge to the device. PONG : Device's response to PING","title":"UDP protocol"},{"location":"udp_protocol/#udp-protocol","text":"Communication between the bridge and the device happens with a lightweight UDP protocol. The protocol is comprised of simple text messages of different types.","title":"UDP protocol"},{"location":"udp_protocol/#message-format","text":"The message format is very basic: <PacketType>:<Arg1>:<Arg2>:...","title":"Message format"},{"location":"udp_protocol/#message-types","text":"DISCOV : Broadcast, and the bridge will reply with BHELLO and its IP address BHELLO : Reply to DISCOV , contains the IP address in arg1 DHELLO : Device hello to notify the bridge that a device is online UPDATE : Sent from the bridge to the device to update a property REPORT : Sent from the device to the bridge to report a value has changed (e.g. a sensor that updated) PING : Keepalive from the bridge to the device. PONG : Device's response to PING","title":"Message types"}]}